package com.skipifzero.petorsandroidframework.framework.input;

import com.skipifzero.petorsandroidframework.framework.math.Vector2;


/**
 * A class representing a touch location on the screen.
 * It is possible to pool and reuse instances of this class to avoid unnecessary garbage.
 * 
 * If you need to store a particular TouchEvent in your program you should clone it instead
 * of keeping a reference since the content of the TouchEvent might change if it is reused.
 * 
 * @author Peter Hillerstr√∂m
 * @version 2
 */
public final class TouchEvent implements Cloneable {
	public enum TouchType{
		NOT_TOUCHING, TOUCH_DOWN, TOUCH_UP, TOUCH_DRAGGED
	}

	private int pointer;
	private double x, y;
	private TouchType type;
	
	/**
	 * Creates a new TouchEvent with the specified values.
	 * Will probably not be called that often since instances might be reused.
	 * @param pointer the pointer to the TouchEvent
	 * @param x the x-coordinate of the TouchEvent
	 * @param y the y-coordinate of the TouchEvent
	 * @param type the TouchType
	 */
	public TouchEvent(int pointer, double x, double y, TouchType type){
		this.pointer = pointer;
		this.type = type;
		this.x = x;
		this.y = y;
	}
	
	
	/**
	 * Sets this TouchEvent to the specified values.
	 * Mainly used when reusing TouchEvents to avoid making the garbage collector angry.
	 * @param pointer the pointer to the TouchEvent
	 * @param x the x-coordinate of the TouchEvent
	 * @param y the y-coordinate of the TouchEvent
	 * @param type the TouchType
	 */
	protected void set(int pointer, double x, double y, TouchType type){
		this.pointer = pointer;
		this.x = x;
		this.y = y;
		this.type = type;
	}
	
	/**
	 * Returns the pointer to this TouchEvent.
	 * 0 <= pointer < max number of simultaneous touch positions.
	 * @return pointer
	 */
	public int getPointer(){
		return pointer;
	}
	
	/**
	 * Returns the x-coordinate of this TouchEvent.
	 * @return x
	 */
	public double getX(){
		return x;
	}
	
	/**
	 * Returns the y-coordinate of this TouchEvent.
	 * @return y
	 */
	public double getY(){
		return y;
	}
	
	/**
	 * Returns the TouchType of this TouchEvent.
	 * @return type the TouchType of this TouchEvent.
	 */
	public TouchType getType(){
		return type;
	}
	
	/**
	 * Sets the specified Vector2 to the position of this TouchEvent.
	 * @param vectorToSet the Vector2 to set.
	 * @return vectorToSet the Vector2 after its been set.
	 */
	public Vector2 getPosition(Vector2 vectorToSet){
		return vectorToSet.set(x,y);
	}
	
	/**
	 * Returns a new Vector2 with the position of this TouchEvent.
	 * @return the position of this TouchEvent.
	 */
	public Vector2 getPosition() {
		return new Vector2(x,y);
	}
	
	/**
	 * Prints the state of this TouchEvent on the following form:
	 * "Pointer: pointer (x,y) Type: type"
	 */
	@Override
	public String toString(){
		StringBuilder builder = new StringBuilder("Pointer: ");
		builder.append(pointer);
		builder.append(" (");
		builder.append((int)Math.round(x));
		builder.append(",");
		builder.append((int)Math.round(y));
		builder.append(") Type: ");
		switch (type){
			case NOT_TOUCHING:
				builder.append("NOT_TOUCHING");
				break;
			case TOUCH_DOWN:
				builder.append("TOUCH_DOWN");
				break;
			case TOUCH_UP:
				builder.append("TOUCH_UP");
				break;
			case TOUCH_DRAGGED:
				builder.append("TOUCH_DRAGGED");
		}
		return builder.toString();
	}

	@Override
	public TouchEvent clone() {
		return new TouchEvent(this.pointer, this.x, this.y, this.type);
	}
	
	/**
	 * hashCode() generated by eclipse.
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + pointer;
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		long temp;
		temp = Double.doubleToLongBits(x);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		temp = Double.doubleToLongBits(y);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	/**
	 * equals() generated by eclipse.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TouchEvent other = (TouchEvent) obj;
		if (pointer != other.pointer)
			return false;
		if (type != other.type)
			return false;
		if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
			return false;
		if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
			return false;
		return true;
	}
}
